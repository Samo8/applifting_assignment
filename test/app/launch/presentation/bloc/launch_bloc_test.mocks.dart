// Mocks generated by Mockito 5.3.2 from annotations
// in applifting_assignment/test/app/launch/presentation/bloc/launch_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:applifting_assignment/app/launch/domain/filter.dart' as _i2;
import 'package:applifting_assignment/app/launch/domain/launch.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

import 'launch_bloc_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFilter_0 extends _i1.SmartFake implements _i2.Filter {
  _FakeFilter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MockLaunchService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockLaunchService extends _i1.Mock implements _i3.MockLaunchService {
  MockMockLaunchService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Launch>> getUpcomingLaunches() => (super.noSuchMethod(
        Invocation.method(
          #getUpcomingLaunches,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Launch>>.value(<_i5.Launch>[]),
      ) as _i4.Future<List<_i5.Launch>>);
  @override
  _i4.Future<List<_i5.Launch>> getPastLaunches() => (super.noSuchMethod(
        Invocation.method(
          #getPastLaunches,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Launch>>.value(<_i5.Launch>[]),
      ) as _i4.Future<List<_i5.Launch>>);
  @override
  List<_i5.Launch> search({
    required List<_i5.Launch>? launches,
    required String? search,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [],
          {
            #launches: launches,
            #search: search,
          },
        ),
        returnValue: <_i5.Launch>[],
      ) as List<_i5.Launch>);
  @override
  List<_i5.Launch> sortLaunches({
    required List<_i5.Launch>? launches,
    required _i2.Filter? filter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sortLaunches,
          [],
          {
            #launches: launches,
            #filter: filter,
          },
        ),
        returnValue: <_i5.Launch>[],
      ) as List<_i5.Launch>);
  @override
  _i4.Future<_i2.Filter> getLaunchFilter() => (super.noSuchMethod(
        Invocation.method(
          #getLaunchFilter,
          [],
        ),
        returnValue: _i4.Future<_i2.Filter>.value(_FakeFilter_0(
          this,
          Invocation.method(
            #getLaunchFilter,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Filter>);
  @override
  String formatDate(DateTime? dateTime) => (super.noSuchMethod(
        Invocation.method(
          #formatDate,
          [dateTime],
        ),
        returnValue: '',
      ) as String);
}
